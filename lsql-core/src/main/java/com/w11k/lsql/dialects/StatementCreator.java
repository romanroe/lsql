package com.w11k.lsql.dialects;

import com.google.common.base.Function;
import com.google.common.base.Joiner;
import com.google.common.collect.Lists;
import com.w11k.lsql.Column;
import com.w11k.lsql.LSql;
import com.w11k.lsql.Table;
import com.w11k.lsql.exceptions.DatabaseAccessException;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static com.w11k.lsql.jdbc.ConnectionUtils.getConnection;
import static java.util.stream.Collectors.toList;

public class StatementCreator {

    private String escapeColumnSymbolLeft = "\"";
    private String escapeColumnSymbolRight = "\"";

    public StatementCreator() {
    }

    public StatementCreator(String escapeColumnSymbolLeft, String escapeColumnSymbolRight) {
        this.escapeColumnSymbolLeft = escapeColumnSymbolLeft;
        this.escapeColumnSymbolRight = escapeColumnSymbolRight;
    }

    public Statement createStatement(LSql lSql) {
        try {
            return getConnection(lSql).createStatement();
        } catch (SQLException e) {
            throw new DatabaseAccessException(e);
        }
    }

    public PreparedStatement createPreparedStatement(LSql lSql, String sqlString, boolean returnAutoGeneratedKeys) {
        try {
            if (returnAutoGeneratedKeys) {
                return getConnection(lSql).prepareStatement(sqlString, Statement.RETURN_GENERATED_KEYS);
            } else {
                return getConnection(lSql).prepareStatement(sqlString);
            }
        } catch (SQLException e) {
            throw new DatabaseAccessException(e);
        }
    }

    public PreparedStatement createRevisionQueryStatement(Table table) {
        String sqlTableName = table.getSqlSchemaAndTableName();
        String revCol = getRevisionColumnSqlIdentifier(table);
        String sql = "SELECT " + revCol + " FROM " + sqlTableName + " WHERE ";
        sql += getEscapedColumn(table.getPrimaryKeyColumn().get());
        sql += "=?";
        return createPreparedStatement(table.getlSql(), sql, false);
    }

    public PreparedStatement createInsertStatement(final Table table, List<String> columns) {
        String sqlTableName = table.getSqlSchemaAndTableName();
        String sql = "";
        sql += "INSERT INTO " + sqlTableName;
        sql += "(";
        sql += Joiner.on(",").join(createSqlColumnNames(table, columns));
        sql += ")VALUES(";
        sql += Joiner.on(",").join(Collections.nCopies(columns.size(), "?"));
        sql += ");";
        return createPreparedStatement(table.getlSql(), sql, true);
    }

    public PreparedStatement createUpdateStatement(Table table, List<String> columns, List<String> whereColumns) {
        String sqlTableName = table.getSqlSchemaAndTableName();
        String sql = "UPDATE " + sqlTableName;
        sql += " SET ";

        // set revision value?
        if (table.getRevisionColumn().isPresent()) {
            String revCol = getRevisionColumnSqlIdentifier(table);
            sql += getEscapedColumn(revCol) + "=" + revCol + "+1";
            if (columns.size() > 0) {
                sql += ",";
            }
        }

        // new values
        sql += Joiner.on(",").join(Lists.transform(
                createSqlColumnNames(table, columns),
                new Function<String, Object>() {
                    @Override
                    public Object apply(String input) {
                        return input + "=?";
                    }
                }));

        // where
        sql += " WHERE ";
        sql += Joiner.on(" AND ").join(Lists.transform(
                createSqlColumnNames(table, whereColumns),
                new Function<String, Object>() {
                    @Override
                    public Object apply(String input) {
                        return input + "=?";
                    }
                }));

        if (table.getRevisionColumn().isPresent()) {
            sql += " AND ";
            sql += getEscapedColumn(getRevisionColumnSqlIdentifier(table)) + "=?";
        }

        sql += ";";
        return createPreparedStatement(table.getlSql(), sql, false);
    }

    public String createSelectByIdStatement(Table table, Column idColumn, Collection<Column> columns) {
        String sqlTableName = table.getSqlSchemaAndTableName();
        String sqlColumnName = idColumn.getTable().getlSql().identifierJavaToSql(idColumn.getJavaColumnName());

        String sql = "SELECT ";
        for (Column column : columns) {
            if (column.isIgnored()) {
                continue;
            }
            sql += getEscapedColumn(column.getSqlColumnName());
            sql += ",";
        }
        sql = sql.substring(0, sql.length() - 1);
        sql += " FROM " + sqlTableName + " WHERE " + getEscapedColumn(sqlColumnName) + "=?;";
        return sql;
    }

    public PreparedStatement createDeleteByIdStatement(Table table) {
        Column idColumn = table.column(table.getPrimaryKeyColumn().get());
        String sqlTableName = table.getSqlSchemaAndTableName();
        String sqlIdName = idColumn.getTable().getlSql().identifierJavaToSql(idColumn.getJavaColumnName());

        String sql = "DELETE FROM ";
        sql += sqlTableName;
        sql += " WHERE ";
        sql += getEscapedColumn(sqlIdName) + "=?";
        if (table.getRevisionColumn().isPresent()) {
            String sqlRevisionName = getRevisionColumnSqlIdentifier(table);
            sql += " AND " + sqlRevisionName + "=?";
        }
        sql += ";";

        return createPreparedStatement(table.getlSql(), sql, false);
    }

    public PreparedStatement createCountForIdStatement(Table table) throws SQLException {
        Column idColumn = table.column(table.getPrimaryKeyColumn().get());
        String sqlTableName = table.getSqlSchemaAndTableName();
        String sqlColumnName = idColumn.getTable().getlSql().identifierJavaToSql(idColumn.getJavaColumnName());

        String sql = "select count("
                + getEscapedColumn(sqlColumnName)
                + ") from "
                + sqlTableName
                + " where "
                + getEscapedColumn(sqlColumnName) + "=?";
        return createPreparedStatement(table.getlSql(), sql, false);
    }

    private String getRevisionColumnSqlIdentifier(Table table) {
        return getEscapedColumn(
                table.getlSql().identifierJavaToSql(table.getRevisionColumn().get().getJavaColumnName()));
    }

    private List<String> createSqlColumnNames(final Table table, List<String> columns) {
        return columns.stream()
                .map(input -> getEscapedColumn(table.getlSql().identifierJavaToSql(input)))
                .collect(toList());
    }

    protected String getEscapedColumn(String column) {
        // avoid double escape
        if (column.startsWith(this.escapeColumnSymbolLeft)) {
            return column;
        }

        String[] split = column.split("\\.");
        return Stream.of(split)
                .map(e -> this.escapeColumnSymbolLeft + e + this.escapeColumnSymbolRight)
                .collect(Collectors.joining());
    }

}
